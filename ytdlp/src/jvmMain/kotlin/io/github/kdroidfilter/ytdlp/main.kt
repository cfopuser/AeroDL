import io.github.kdroidfilter.ytdlp.YtDlpWrapper
import io.github.kdroidfilter.ytdlp.YtDlpWrapper.InitEvent
import io.github.kdroidfilter.ytdlp.core.Event
import kotlinx.coroutines.runBlocking
import java.io.File
import java.time.Duration

fun main() = runBlocking {
    val wrapper = YtDlpWrapper().apply {
        // Dossier de t√©l√©chargement par d√©faut (modifiable)
        downloadDir = File(System.getProperty("user.home"), "Downloads/yt-dlp")
    }

    // Nouvelle API d'initialisation non bloquante avec √©v√©nements pour l'UI
    println("üîß Initialisation de yt-dlp/ffmpeg‚Ä¶")
    val initOk = wrapper.initialize { ev ->
        when (ev) {
            is InitEvent.CheckingYtDlp -> println("üîç V√©rification de yt-dlp‚Ä¶")
            is InitEvent.DownloadingYtDlp -> println("‚¨áÔ∏è T√©l√©chargement de yt-dlp‚Ä¶")
            is InitEvent.UpdatingYtDlp -> println("‚¨ÜÔ∏è Mise √† jour de yt-dlp‚Ä¶")
            is InitEvent.EnsuringFfmpeg -> println("üé¨ V√©rification de FFmpeg‚Ä¶")
            is InitEvent.YtDlpProgress -> {
                val pct = ev.percent?.let { String.format("%.1f", it) } ?: "?"
                print("\r‚¨áÔ∏è yt-dlp: $pct%")
            }
            is InitEvent.FfmpegProgress -> {
                val pct = ev.percent?.let { String.format("%.1f", it) } ?: "?"
                print("\rüé¨ FFmpeg: $pct%")
            }
            is InitEvent.Error -> {
                println("\n‚ö†Ô∏è Init: ${ev.message}")
                ev.cause?.let { println("   ‚Ü≥ ${it::class.simpleName}: ${it.message}") }
            }
            is InitEvent.Completed -> println(if (ev.success) "\n‚úÖ Init ok" else "\n‚ùå Init √©chou√©e")
        }
    }
    if (!initOk) {
        println("Arr√™t car initialisation impossible.")
        return@runBlocking
    }

    println("‚úÖ yt-dlp version: ${wrapper.version() ?: "inconnue"}")
    println("‚úÖ FFmpeg: ${wrapper.ffmpegPath ?: "(via PATH ou gestion interne)"}")

    // Download
    val url = "https://www.youtube.com/watch?v=UoywDs3YXOM"
    println("üì• T√©l√©chargement de la vid√©o: $url")

    val handle = wrapper.download(
        url,
        YtDlpWrapper.Options(
            format = "bestvideo+bestaudio/best",
            noCheckCertificate = true, // mets true si probl√®mes TLS c√¥t√© r√©seau filtr√©
            timeout = Duration.ofMinutes(20), // coupe proprement si √ßa stagne trop longtemps
            extraArgs = listOf("--concurrent-fragments", "8") // exemple d‚Äôopt utile
        )
    ) { event ->
        when (event) {
            is Event.Started -> println("‚ñ∂Ô∏è  T√©l√©chargement d√©marr√©‚Ä¶")
            is Event.Progress -> {
                val pct = event.percent?.let { String.format("%.1f", it) } ?: "?"
                print("\rProgression: $pct%")
            }
            is Event.Log -> { /* println("\nLOG: ${event.line}") */ }
            is Event.NetworkProblem -> println("\nüåê Probl√®me r√©seau d√©tect√©: ${event.detail}")
            is Event.Error -> {
                println("\n‚ùå Erreur: ${event.message}")
                event.cause?.let { println("   ‚Ü≥ Cause: ${it::class.simpleName}: ${it.message}") }
            }
            is Event.Completed -> {
                println("\n${if (event.success) "‚úÖ" else "‚ùå"} T√©l√©chargement termin√© (exit code ${event.exitCode})")
                if (!event.success) println("   Astuces: v√©rifie la connexion, les certificats, ou ajoute --no-check-certificate / un proxy si besoin.")
            }
            is Event.Cancelled -> println("\n‚èπÔ∏è  T√©l√©chargement annul√©.")
        }
    }

    // Wait for completion (or timeout/annulation)
    handle.process.waitFor()
}
